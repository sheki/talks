Rewriting the Parse API in Go
GopherCon 2015, Denver
8 Jul 2015

Abhishek Kona
Software Engineer at Parse.com, Facebook
abhishekk@fb.com
http://sheki.in
@sheki

* What is this talk about?
- Why and how did we rewrite api.parse.com from Ruby to Go
- Tools and libraries we built

* What is Parse?
.image images/parse.jpg
- Backend-As-A-Service, build an app not backend
- Works for iOS, Android, JS, React, Windows, PHP ...
- Acquired by Facebook in 2013

* Rome was not built in a day - they did not use Parse
.image images/parse_rome.jpg _ 400

* Parse - circa 2013
- ~60K apps
- 10 Engineers
- Ruby on Rails App
.image images/rails.png _ 200

* Parse - Issues (2013)
- Single popular app could take down Parse
- Fixed unicorn pool
- High deploy times
- Unmanageable codebase # spooky action at a distance

* We decided to Rewrite in Go
.image images/rewrite.png 500 400

* Why Rewrite?
- Estimated reliability win - huge
- Wanted something static
- Hard to evolve to existing Ruby codebase

* Why Go?
- Statically typed
- Good concurrency support
- Shiny - easy to attract engineers

* Rules of the rewrite
- Don't break backward compatibility
- No downtime

* Battle-testing 
- Started with a new service : Hosting
- Next up : rewrite Parse push notification service (PPNS)
- PPNS went from 250k conns to 1.5m conns per node

* Mongo-Proxy - Dvara
.link https://github.com/facebookgo/dvara
- Mongo limits max number of connections to 20000
- We wrote our own proxy for Mongo in Go
- Go has good network stack

* Rollout
- Migrate endpoints one by one
- Picked low-traffic read only endpoints
- Graduate to write endpoints
- Shadow live-traffic

* Comment Goldmine
.code code/ruby_comments.go

* A young language
- Some good libraries -> mgo, memcache
- Missing libraries
  
* Libraries / Tools

* Dependency Injection

- Selecting implementations for test and production
- Easy to miss passing a dependency to a struct 

* Introducing Inject
.link http://github.com/facebookgo/inject
- Dependency injection only at process start-time
- Explicit tags
- Fail instead of guessing

* Dependency Injection Code
.code code/inject_example.go

* Main for Inject
.code code/inject_main.go

* Start-stop 
.link http://github.com/facebookgo/startstop
- Call `Start` / `Stop` automatically
- Starts types in a bottom up fashion
- Fails on cycles

* Start-stop code
.code code/ship_code.go

* Graceful restarts
.link https://github.com/facebookgo/grace
- Restart servers gracefully on deploys
- Hand off the socket from the old process to the new process

* Error Reporting / stackerr
.link https://github.com/facebookgo/stackerr
- Wrap error calls with stackerr
- Aggregate errors based on stack trace in an in house system called log-view

* Stackerr code sample
.code code/stackerr.go

* Stackerr Output
.code code/stackerr_out.go

* Muster
.link https://github.com/facebookgo/muster
- A library to perform operations in a batch
- Two tunables `MaxBatchSize` or `BatchTimeout`

* Generics
.link https://github.com/facebookgo/generics

* Moar Libraries
.link https://github.com/facebookgo 
- Lots of small libraries
- httpcontrol, ensure, stack 

* We love Go
.link github.com/daaku
.image images/naitik_like.jpg _ 350

* Results / Observations

* Results
- ~175k Go LOC vs ~130k Ruby Codebase
- ~3 minutes to run all the unit tests (down from 25min)
- Fast application start
- Downsize our API server pool by 90%
- Rolling restarts dropped from 30 minutes to 3 minutes

* Parse - circa 2015
- 500K apps built on Parse
- 2-3X YoY traffic growth
- Primarily a Go Stack
.image images/gopherbw.png 230 200

* Observations
- Rewrites are hard
- ~4 engineers over 2 years
- We will do it again

* Recap
.image images/unicorn_burning.png

* Eulogy to Unicorns

  I'd just like to say a few words before we light these unicorns on fire, 
  and send them to hell forever.  
  Thank you for helping us build Parse.  
  Even though you were a miserable sack of shit that paged us in the middle of the night, 
  and were undebuggable, 
  and hid all your most valuable information from us 
  instead of putting it in a useful log someplace.
  You did your best for us, and we honor your sacrifice.  

  And now your watch has ended. 
  -- Charity Majors
