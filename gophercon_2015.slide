Rewriting the Parse API in Go
GopherCon 2015, Denver
8 Jul 2015

Abhishek Kona
Software Engineer at Parse and Facebook
abhishekk@fb.com
http://sheki.in
@sheki

* What is this talk about?
- Why we rewrote the Parse API in Go
- Tools and libraries we built

* What is Parse?
.image images/parse.jpg
- Backend as a service
- SDKs for iOS, Android, JS, React, Windows, PHP
- Acquired by Facebook in 2013

* Rome was not built in a day - they did not use Parse
.image images/parse_rome.jpg _ 400

* Parse circa 2013
- ~60K apps
- 10 engineers
- Ruby on Rails app
.image images/rails.png _ 200

* Scalability Issues in 2013
- Single popular app could take down Parse
- Fixed-size unicorn pool
- Lengthy deploy times
- Spooky action at a distance

* Solution: Rewrite in Go!
.image images/rewrite.png 500 400

* Why Rewrite?
- Huge estimated reliability win
- Wanted easier deploys
- Needed faster tests
- Hard to evolve to existing Ruby codebase

* Why Go?
- Statically typed
- Good concurrency support
- Dynamic number of worker goroutines per HTTP server
- Easy to attract engineers

* Rules of the Rewrite
- Don't break backwards compatibility
- No downtime

* Initial Ports
- Hosting server
- Parse Push Notification Service (PPNS)
- Maintains long-lived push sockets with Android clients
- Concurrent conns per node increased from 250K to 1.5M

* Mongo Proxy
.link https://github.com/facebookgo/dvara
- Mongo used to limit max number of connections to 20000
- We wrote our own proxy for Mongo in Go
- Made easy by Go runtime's use of non-blocking I/O

* Rollout
- Migrate endpoints one by one
- Diffed responses between old and new code using a shadow cluster
- Started with low-traffic read only endpoints
- Graduated to write endpoints

* Comment Goldmine
.code code/ruby_comments.go

* A Young Language
- Some good libraries: mgo, memcache, etc.
- Some missing libraries
  
* Libraries / Tools

* Dependency Injection

- Helps instantiate implementations for test and production
- Easy to miss passing a dependency to a struct

* Introducing Inject
.link http://github.com/facebookgo/inject
- Only occurs at process startup for singletons
- Dependencies declared using struct tags
- Fail instead of guessing

* Dependency Injection Example
.code code/inject_example.go

* Main for Inject
.code code/inject_main.go

* Initializing and Destroying Injected Objects
.link http://github.com/facebookgo/startstop
- Traverses object graph
- At startup: calls `Start` on each injected object in dependency order
- At shutdown: calls `Stop` on each injected object in reverse dependency order
- Fails on cycles

* Start-Stop Example
.code code/ship_code.go

* Graceful Restarts
.link https://github.com/facebookgo/grace
- Restart servers gracefully on deploys
- On USR2, spawns new process and hands off listening socket

* Error Reporting
.link https://github.com/facebookgo/stackerr
- Wrap error calls with stackerr
- Aggregate errors based on stack trace in an in-house system called Logview

* Stackerr Example
.code code/stackerr.go

* Stackerr Output
.code code/stackerr_out.go

* Muster
.link https://github.com/facebookgo/muster
- A library to perform operations in a batch
- Two tunables: `MaxBatchSize` and `BatchTimeout`

* Generics
.link https://github.com/facebookgo/generics

* More Libraries
.link https://github.com/facebookgo 
- Many more small libraries
- httpcontrol, ensure, stack 

* We Love Go
.link github.com/daaku
.image images/naitik_like.jpg _ 350

* Results

* Results
- ~175k LOC in Go vs ~130k LOC in Ruby
- ~3 minutes to run all the unit tests (down from 25min)
- Apps start in seconds instead of minutes
- Downsized API server pool by 90%
- Rolling restarts dropped from 30 minutes to 3 minutes

* Parse circa 2015
- >500K apps built on Parse
- 2-3x YoY traffic growth
- Primarily a Go stack
.image images/gopherbw.png 230 200

* Observations
- Rewrites are hard
- ~4 engineers over 2 years

* Go Side Effects
- Deploying with static binaries is easy
- Developers are responsible for deploys, not ops

* Recap
.image images/unicorn_burning.png

* http://tiny.cc/parsego
